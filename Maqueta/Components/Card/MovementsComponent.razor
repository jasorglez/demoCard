@using System.Text.Json;
@using System.Text;
@using Bussines
@using Entities;
@using System.Text.Json.Serialization;
@implements IDisposable

<head>
    <link href="css/style.css" rel="stylesheet" >
</head>

  <h1 style="color: @Color"> Estado de Cuenta </h1>


     <table class="table table-hover table-bordered">
        <thead>
              <tr>
                  <th>Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                   <th>Amount &nbsp;&nbsp;&nbsp;&nbsp;</th>
                   <th>Available Balance&nbsp;&nbsp</th>
                   <th>Deposit</th>
                   <th>Deposit test</th>
                   <th>Type Currency</th>
              </tr>
        </thead>
               <tbody>
                    @foreach (var lista in listamov)
                    {
                        <tr>
                            <td>@lista.Campo1</td>
                            <td>$@lista.Campo2</td>
                            <td>$@lista.Campo3</td>
                            <td>$@lista.Campo5</td>
                            <td>$@lista.Campo6</td>
                            <td>@lista.Campo4</td>
                        </tr>
                    }
                </tbody>
    </table>
    
@code {
    [CascadingParameter] 
    protected string Color { get; set; }

    [Parameter]

    public string Utoken { get; set; }

    string usuario = "jsoriano";
    string card_token = "1deac936-7e1f-4ce6-bead-8f17b46b273c";
    public string cadenadendpoint;
    public string transac;

    List<Valores> listamov = new List<Valores>();
    KardexEntity kardex = new KardexEntity();

    protected override async Task OnInitializedAsync()
    {
        string url = "https://sandbox-api.marqeta.com/v3/";
      

        //Paso la autorizacion de manera Basic Auth, pones el application token y el Admin Token
        var byteArray = Encoding.ASCII.GetBytes(("5f19cdd3-f48c-4c9e-8c76-035485bc5847:fc09b65b-e271-44f0-be4c-1d03af59042e"));
        JsonSerializerOptions options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));

            // esta llamada es la de los movimientos
            string urlmovimientos=url+"transactions/?card_token="+card_token;
            cadenadendpoint = "Realizando Get  " + urlmovimientos;

            //para las transacciones
            var respmov = await httpClient.GetAsync(urlmovimientos);
            if (respmov.IsSuccessStatusCode)
            {
                var content = await respmov.Content.ReadAsStringAsync();
                var movimientos = JsonSerializer.Deserialize<Transactionsbycard.Root>(content, options);

                foreach(var mov in movimientos.data)
                {
                    transac = mov.issuer_payment_node;
                    listamov.Add(new Valores()
                        {
                            operacion = mov.issuer_payment_node,
                            Campo1 = mov.created_time,
                            Campo2 = mov.amount,
                            Campo3 = mov.gpa.available_balance,
                            Campo4 = mov.currency_code,
                            Campo5 = mov.amount + mov.gpa.available_balance,
                            Campo6 = mov.gpa.ledger_balance
                        });   
                }

                B_Kardex.CreateKardex(kardex, "Main transactions Card_token = 1deac936-7e1f-4ce6-bead-8f17b46b273c",
                                     cadenadendpoint, transac, content);
            }

        }
    }

    public void Dispose()
    {
       
    }

}