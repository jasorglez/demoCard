@using System.Text.Json;
@using System.Text;
@using Bussines
@using Entities;
@using System.Text.Json.Serialization;

@*@inject IKardex kardexBussinnes;*@


<head>
    <link href="css/style.css" rel="stylesheet" >
</head>

<body>
     <p class="tarjetaxusuario"> Number Card: @Tarjeta &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; 
         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Avaiable:$ @Saldo </p>
</body>

    
@code {

    [Parameter]
    public string Tarjeta { get; set; }
    public Double Saldo { get; set; }
    public string Utoken { get; set; }
    string operacion ;
    public string content2 ;

    string usuario = "jsoriano";
    string card_token = "1deac936-7e1f-4ce6-bead-8f17b46b273c";

    KardexEntity kardex = new KardexEntity();

    protected override async Task OnInitializedAsync()
    {
        string url = "https://sandbox-api.marqeta.com/v3/";

        //Paso la autorizacion de manera Basic Auth, pones el application token y el Admin Token
        var byteArray = Encoding.ASCII.GetBytes(("5f19cdd3-f48c-4c9e-8c76-035485bc5847:fc09b65b-e271-44f0-be4c-1d03af59042e"));
        JsonSerializerOptions options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));

            //las llamadas las tarjetas por usuario
            string urlcard=url+"cards/user/"+usuario;

            //el saldo total de la tarjeta
            string urlbalance=url+"balances/"+usuario;


            string cadenadendpoint = "Realizado GET " + urlcard;

            var response = await httpClient.GetAsync(urlcard);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var usuario = JsonSerializer.Deserialize<Getcardforuser.Users>(content, options);
                foreach (var user in usuario.data)
                {
                    Tarjeta = user.last_four;
                    Utoken  = user.user_token;
                    operacion = user.card_product_token;
                }
            }
            else
                Tarjeta = "Not Card";

            // Para sacar el  balance
            var respbal = await httpClient.GetAsync(urlbalance);
            if (respbal.IsSuccessStatusCode)
            {
                var content = await respbal.Content.ReadAsStringAsync();
                content2 = content;
                var balance = JsonSerializer.Deserialize<Balance.balancetotal>(content, options);
                Saldo = balance.gpa.available_balance;

            }
            else
                Saldo = 0.00;
         
            B_Kardex.CreateKardex(kardex, "Main Card card_token = 1deac936-7e1f-4ce6-bead-8f17b46b273c",
                                           cadenadendpoint, operacion, content2);
        }
    }
}